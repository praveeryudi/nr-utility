{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, strings } from './constants';\n\nvar MDCDataTableFoundation =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCDataTableFoundation, _super);\n\n  function MDCDataTableFoundation(adapter) {\n    return _super.call(this, tslib_1.__assign({}, MDCDataTableFoundation.defaultAdapter, adapter)) || this;\n  }\n\n  Object.defineProperty(MDCDataTableFoundation, \"defaultAdapter\", {\n    get: function () {\n      return {\n        addClassAtRowIndex: function () {\n          return undefined;\n        },\n        getRowCount: function () {\n          return 0;\n        },\n        getRowElements: function () {\n          return [];\n        },\n        getRowIdAtIndex: function () {\n          return '';\n        },\n        getRowIndexByChildElement: function () {\n          return 0;\n        },\n        getSelectedRowCount: function () {\n          return 0;\n        },\n        isCheckboxAtRowIndexChecked: function () {\n          return false;\n        },\n        isHeaderRowCheckboxChecked: function () {\n          return false;\n        },\n        isRowsSelectable: function () {\n          return false;\n        },\n        notifyRowSelectionChanged: function () {\n          return undefined;\n        },\n        notifySelectedAll: function () {\n          return undefined;\n        },\n        notifyUnselectedAll: function () {\n          return undefined;\n        },\n        registerHeaderRowCheckbox: function () {\n          return undefined;\n        },\n        registerRowCheckboxes: function () {\n          return undefined;\n        },\n        removeClassAtRowIndex: function () {\n          return undefined;\n        },\n        setAttributeAtRowIndex: function () {\n          return undefined;\n        },\n        setHeaderRowCheckboxChecked: function () {\n          return undefined;\n        },\n        setHeaderRowCheckboxIndeterminate: function () {\n          return undefined;\n        },\n        setRowCheckboxCheckedAtIndex: function () {\n          return undefined;\n        }\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Re-initializes header row checkbox and row checkboxes when selectable rows are added or removed from table.\n   * Use this if registering checkbox is synchronous.\n   */\n\n  MDCDataTableFoundation.prototype.layout = function () {\n    if (this.adapter_.isRowsSelectable()) {\n      this.adapter_.registerHeaderRowCheckbox();\n      this.adapter_.registerRowCheckboxes();\n      this.setHeaderRowCheckboxState_();\n    }\n  };\n  /**\n   * Re-initializes header row checkbox and row checkboxes when selectable rows are added or removed from table.\n   * Use this if registering checkbox is asynchronous.\n   */\n\n\n  MDCDataTableFoundation.prototype.layoutAsync = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.adapter_.isRowsSelectable()) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.adapter_.registerHeaderRowCheckbox()];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.adapter_.registerRowCheckboxes()];\n\n          case 2:\n            _a.sent();\n\n            this.setHeaderRowCheckboxState_();\n            _a.label = 3;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * @return Returns array of row elements.\n   */\n\n\n  MDCDataTableFoundation.prototype.getRows = function () {\n    return this.adapter_.getRowElements();\n  };\n  /**\n   * Sets selected row ids. Overwrites previously selected rows.\n   * @param rowIds Array of row ids that needs to be selected.\n   */\n\n\n  MDCDataTableFoundation.prototype.setSelectedRowIds = function (rowIds) {\n    for (var rowIndex = 0; rowIndex < this.adapter_.getRowCount(); rowIndex++) {\n      var rowId = this.adapter_.getRowIdAtIndex(rowIndex);\n      var isSelected = false;\n\n      if (rowId && rowIds.indexOf(rowId) >= 0) {\n        isSelected = true;\n      }\n\n      this.adapter_.setRowCheckboxCheckedAtIndex(rowIndex, isSelected);\n      this.selectRowAtIndex_(rowIndex, isSelected);\n    }\n\n    this.setHeaderRowCheckboxState_();\n  };\n  /**\n   * @return Returns array of selected row ids.\n   */\n\n\n  MDCDataTableFoundation.prototype.getSelectedRowIds = function () {\n    var selectedRowIds = [];\n\n    for (var rowIndex = 0; rowIndex < this.adapter_.getRowCount(); rowIndex++) {\n      if (this.adapter_.isCheckboxAtRowIndexChecked(rowIndex)) {\n        selectedRowIds.push(this.adapter_.getRowIdAtIndex(rowIndex));\n      }\n    }\n\n    return selectedRowIds;\n  };\n  /**\n   * Handles header row checkbox change event.\n   */\n\n\n  MDCDataTableFoundation.prototype.handleHeaderRowCheckboxChange = function () {\n    var isHeaderChecked = this.adapter_.isHeaderRowCheckboxChecked();\n\n    for (var rowIndex = 0; rowIndex < this.adapter_.getRowCount(); rowIndex++) {\n      this.adapter_.setRowCheckboxCheckedAtIndex(rowIndex, isHeaderChecked);\n      this.selectRowAtIndex_(rowIndex, isHeaderChecked);\n    }\n\n    if (isHeaderChecked) {\n      this.adapter_.notifySelectedAll();\n    } else {\n      this.adapter_.notifyUnselectedAll();\n    }\n  };\n  /**\n   * Handles change event originated from row checkboxes.\n   */\n\n\n  MDCDataTableFoundation.prototype.handleRowCheckboxChange = function (event) {\n    var rowIndex = this.adapter_.getRowIndexByChildElement(event.target);\n\n    if (rowIndex === -1) {\n      return;\n    }\n\n    var selected = this.adapter_.isCheckboxAtRowIndexChecked(rowIndex);\n    this.selectRowAtIndex_(rowIndex, selected);\n    this.setHeaderRowCheckboxState_();\n    var rowId = this.adapter_.getRowIdAtIndex(rowIndex);\n    this.adapter_.notifyRowSelectionChanged({\n      rowId: rowId,\n      rowIndex: rowIndex,\n      selected: selected\n    });\n  };\n  /**\n   * Updates header row checkbox state based on number of rows selected.\n   */\n\n\n  MDCDataTableFoundation.prototype.setHeaderRowCheckboxState_ = function () {\n    if (this.adapter_.getSelectedRowCount() === this.adapter_.getRowCount()) {\n      this.adapter_.setHeaderRowCheckboxChecked(true);\n      this.adapter_.setHeaderRowCheckboxIndeterminate(false);\n    } else if (this.adapter_.getSelectedRowCount() === 0) {\n      this.adapter_.setHeaderRowCheckboxIndeterminate(false);\n      this.adapter_.setHeaderRowCheckboxChecked(false);\n    } else {\n      this.adapter_.setHeaderRowCheckboxIndeterminate(true);\n      this.adapter_.setHeaderRowCheckboxChecked(false);\n    }\n  };\n  /**\n   * Sets the attributes of row element based on selection state.\n   */\n\n\n  MDCDataTableFoundation.prototype.selectRowAtIndex_ = function (rowIndex, selected) {\n    if (selected) {\n      this.adapter_.addClassAtRowIndex(rowIndex, cssClasses.ROW_SELECTED);\n      this.adapter_.setAttributeAtRowIndex(rowIndex, strings.ARIA_SELECTED, 'true');\n    } else {\n      this.adapter_.removeClassAtRowIndex(rowIndex, cssClasses.ROW_SELECTED);\n      this.adapter_.setAttributeAtRowIndex(rowIndex, strings.ARIA_SELECTED, 'false');\n    }\n  };\n\n  return MDCDataTableFoundation;\n}(MDCFoundation);\n\nexport { MDCDataTableFoundation };","map":{"version":3,"sources":["foundation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, strings } from './constants';\nvar MDCDataTableFoundation = /** @class */ (function (_super) {\n    tslib_1.__extends(MDCDataTableFoundation, _super);\n    function MDCDataTableFoundation(adapter) {\n        return _super.call(this, tslib_1.__assign({}, MDCDataTableFoundation.defaultAdapter, adapter)) || this;\n    }\n    Object.defineProperty(MDCDataTableFoundation, \"defaultAdapter\", {\n        get: function () {\n            return {\n                addClassAtRowIndex: function () { return undefined; },\n                getRowCount: function () { return 0; },\n                getRowElements: function () { return []; },\n                getRowIdAtIndex: function () { return ''; },\n                getRowIndexByChildElement: function () { return 0; },\n                getSelectedRowCount: function () { return 0; },\n                isCheckboxAtRowIndexChecked: function () { return false; },\n                isHeaderRowCheckboxChecked: function () { return false; },\n                isRowsSelectable: function () { return false; },\n                notifyRowSelectionChanged: function () { return undefined; },\n                notifySelectedAll: function () { return undefined; },\n                notifyUnselectedAll: function () { return undefined; },\n                registerHeaderRowCheckbox: function () { return undefined; },\n                registerRowCheckboxes: function () { return undefined; },\n                removeClassAtRowIndex: function () { return undefined; },\n                setAttributeAtRowIndex: function () { return undefined; },\n                setHeaderRowCheckboxChecked: function () { return undefined; },\n                setHeaderRowCheckboxIndeterminate: function () { return undefined; },\n                setRowCheckboxCheckedAtIndex: function () { return undefined; },\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Re-initializes header row checkbox and row checkboxes when selectable rows are added or removed from table.\n     * Use this if registering checkbox is synchronous.\n     */\n    MDCDataTableFoundation.prototype.layout = function () {\n        if (this.adapter_.isRowsSelectable()) {\n            this.adapter_.registerHeaderRowCheckbox();\n            this.adapter_.registerRowCheckboxes();\n            this.setHeaderRowCheckboxState_();\n        }\n    };\n    /**\n     * Re-initializes header row checkbox and row checkboxes when selectable rows are added or removed from table.\n     * Use this if registering checkbox is asynchronous.\n     */\n    MDCDataTableFoundation.prototype.layoutAsync = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.adapter_.isRowsSelectable()) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.adapter_.registerHeaderRowCheckbox()];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, this.adapter_.registerRowCheckboxes()];\n                    case 2:\n                        _a.sent();\n                        this.setHeaderRowCheckboxState_();\n                        _a.label = 3;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * @return Returns array of row elements.\n     */\n    MDCDataTableFoundation.prototype.getRows = function () {\n        return this.adapter_.getRowElements();\n    };\n    /**\n     * Sets selected row ids. Overwrites previously selected rows.\n     * @param rowIds Array of row ids that needs to be selected.\n     */\n    MDCDataTableFoundation.prototype.setSelectedRowIds = function (rowIds) {\n        for (var rowIndex = 0; rowIndex < this.adapter_.getRowCount(); rowIndex++) {\n            var rowId = this.adapter_.getRowIdAtIndex(rowIndex);\n            var isSelected = false;\n            if (rowId && rowIds.indexOf(rowId) >= 0) {\n                isSelected = true;\n            }\n            this.adapter_.setRowCheckboxCheckedAtIndex(rowIndex, isSelected);\n            this.selectRowAtIndex_(rowIndex, isSelected);\n        }\n        this.setHeaderRowCheckboxState_();\n    };\n    /**\n     * @return Returns array of selected row ids.\n     */\n    MDCDataTableFoundation.prototype.getSelectedRowIds = function () {\n        var selectedRowIds = [];\n        for (var rowIndex = 0; rowIndex < this.adapter_.getRowCount(); rowIndex++) {\n            if (this.adapter_.isCheckboxAtRowIndexChecked(rowIndex)) {\n                selectedRowIds.push(this.adapter_.getRowIdAtIndex(rowIndex));\n            }\n        }\n        return selectedRowIds;\n    };\n    /**\n     * Handles header row checkbox change event.\n     */\n    MDCDataTableFoundation.prototype.handleHeaderRowCheckboxChange = function () {\n        var isHeaderChecked = this.adapter_.isHeaderRowCheckboxChecked();\n        for (var rowIndex = 0; rowIndex < this.adapter_.getRowCount(); rowIndex++) {\n            this.adapter_.setRowCheckboxCheckedAtIndex(rowIndex, isHeaderChecked);\n            this.selectRowAtIndex_(rowIndex, isHeaderChecked);\n        }\n        if (isHeaderChecked) {\n            this.adapter_.notifySelectedAll();\n        }\n        else {\n            this.adapter_.notifyUnselectedAll();\n        }\n    };\n    /**\n     * Handles change event originated from row checkboxes.\n     */\n    MDCDataTableFoundation.prototype.handleRowCheckboxChange = function (event) {\n        var rowIndex = this.adapter_.getRowIndexByChildElement(event.target);\n        if (rowIndex === -1) {\n            return;\n        }\n        var selected = this.adapter_.isCheckboxAtRowIndexChecked(rowIndex);\n        this.selectRowAtIndex_(rowIndex, selected);\n        this.setHeaderRowCheckboxState_();\n        var rowId = this.adapter_.getRowIdAtIndex(rowIndex);\n        this.adapter_.notifyRowSelectionChanged({ rowId: rowId, rowIndex: rowIndex, selected: selected });\n    };\n    /**\n     * Updates header row checkbox state based on number of rows selected.\n     */\n    MDCDataTableFoundation.prototype.setHeaderRowCheckboxState_ = function () {\n        if (this.adapter_.getSelectedRowCount() === this.adapter_.getRowCount()) {\n            this.adapter_.setHeaderRowCheckboxChecked(true);\n            this.adapter_.setHeaderRowCheckboxIndeterminate(false);\n        }\n        else if (this.adapter_.getSelectedRowCount() === 0) {\n            this.adapter_.setHeaderRowCheckboxIndeterminate(false);\n            this.adapter_.setHeaderRowCheckboxChecked(false);\n        }\n        else {\n            this.adapter_.setHeaderRowCheckboxIndeterminate(true);\n            this.adapter_.setHeaderRowCheckboxChecked(false);\n        }\n    };\n    /**\n     * Sets the attributes of row element based on selection state.\n     */\n    MDCDataTableFoundation.prototype.selectRowAtIndex_ = function (rowIndex, selected) {\n        if (selected) {\n            this.adapter_.addClassAtRowIndex(rowIndex, cssClasses.ROW_SELECTED);\n            this.adapter_.setAttributeAtRowIndex(rowIndex, strings.ARIA_SELECTED, 'true');\n        }\n        else {\n            this.adapter_.removeClassAtRowIndex(rowIndex, cssClasses.ROW_SELECTED);\n            this.adapter_.setAttributeAtRowIndex(rowIndex, strings.ARIA_SELECTED, 'false');\n        }\n    };\n    return MDCDataTableFoundation;\n}(MDCFoundation));\nexport { MDCDataTableFoundation };\n//# sourceMappingURL=foundation.js.map"]},"metadata":{},"sourceType":"module"}