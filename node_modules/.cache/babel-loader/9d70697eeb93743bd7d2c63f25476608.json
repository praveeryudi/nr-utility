{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { MDCCheckbox } from '@material/checkbox/component';\nimport { closest } from '@material/dom/ponyfill';\nimport { cssClasses, events, strings } from './constants';\nimport { MDCDataTableFoundation } from './foundation';\n\nvar MDCDataTable =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCDataTable, _super);\n\n  function MDCDataTable() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MDCDataTable.attachTo = function (root) {\n    return new MDCDataTable(root);\n  };\n\n  MDCDataTable.prototype.initialize = function (checkboxFactory) {\n    if (checkboxFactory === void 0) {\n      checkboxFactory = function (el) {\n        return new MDCCheckbox(el);\n      };\n    }\n\n    this.checkboxFactory_ = checkboxFactory;\n  };\n\n  MDCDataTable.prototype.initialSyncWithDOM = function () {\n    var _this = this;\n\n    this.headerRow_ = this.root_.querySelector(\".\" + cssClasses.HEADER_ROW);\n\n    this.handleHeaderRowCheckboxChange_ = function () {\n      return _this.foundation_.handleHeaderRowCheckboxChange();\n    };\n\n    this.headerRow_.addEventListener('change', this.handleHeaderRowCheckboxChange_);\n    this.content_ = this.root_.querySelector(\".\" + cssClasses.CONTENT);\n\n    this.handleRowCheckboxChange_ = function (event) {\n      return _this.foundation_.handleRowCheckboxChange(event);\n    };\n\n    this.content_.addEventListener('change', this.handleRowCheckboxChange_);\n    this.layout();\n  };\n  /**\n   * Re-initializes header row checkbox and row checkboxes when selectable rows are added or removed from table.\n   */\n\n\n  MDCDataTable.prototype.layout = function () {\n    this.foundation_.layout();\n  };\n  /**\n   * @return Returns array of row elements.\n   */\n\n\n  MDCDataTable.prototype.getRows = function () {\n    return this.foundation_.getRows();\n  };\n  /**\n   * @return Returns array of selected row ids.\n   */\n\n\n  MDCDataTable.prototype.getSelectedRowIds = function () {\n    return this.foundation_.getSelectedRowIds();\n  };\n  /**\n   * Sets selected row ids. Overwrites previously selected rows.\n   * @param rowIds Array of row ids that needs to be selected.\n   */\n\n\n  MDCDataTable.prototype.setSelectedRowIds = function (rowIds) {\n    this.foundation_.setSelectedRowIds(rowIds);\n  };\n\n  MDCDataTable.prototype.destroy = function () {\n    this.headerRow_.removeEventListener('change', this.handleHeaderRowCheckboxChange_);\n    this.content_.removeEventListener('change', this.handleRowCheckboxChange_);\n    this.headerRowCheckbox_.destroy();\n    this.rowCheckboxList_.forEach(function (checkbox) {\n      return checkbox.destroy();\n    });\n  };\n\n  MDCDataTable.prototype.getDefaultFoundation = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n    // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n\n\n    var adapter = {\n      addClassAtRowIndex: function (rowIndex, className) {\n        return _this.getRows()[rowIndex].classList.add(className);\n      },\n      getRowCount: function () {\n        return _this.getRows().length;\n      },\n      getRowElements: function () {\n        return [].slice.call(_this.root_.querySelectorAll(strings.ROW_SELECTOR));\n      },\n      getRowIdAtIndex: function (rowIndex) {\n        return _this.getRows()[rowIndex].getAttribute(strings.DATA_ROW_ID_ATTR);\n      },\n      getRowIndexByChildElement: function (el) {\n        return _this.getRows().indexOf(closest(el, strings.ROW_SELECTOR));\n      },\n      getSelectedRowCount: function () {\n        return _this.root_.querySelectorAll(strings.ROW_SELECTED_SELECTOR).length;\n      },\n      isCheckboxAtRowIndexChecked: function (rowIndex) {\n        return _this.rowCheckboxList_[rowIndex].checked;\n      },\n      isHeaderRowCheckboxChecked: function () {\n        return _this.headerRowCheckbox_.checked;\n      },\n      isRowsSelectable: function () {\n        return !!_this.root_.querySelector(strings.ROW_CHECKBOX_SELECTOR);\n      },\n      notifyRowSelectionChanged: function (data) {\n        _this.emit(events.ROW_SELECTION_CHANGED, {\n          row: _this.getRowByIndex_(data.rowIndex),\n          rowId: _this.getRowIdByIndex_(data.rowIndex),\n          rowIndex: data.rowIndex,\n          selected: data.selected\n        },\n        /** shouldBubble */\n        true);\n      },\n      notifySelectedAll: function () {\n        return _this.emit(events.SELECTED_ALL, {},\n        /** shouldBubble */\n        true);\n      },\n      notifyUnselectedAll: function () {\n        return _this.emit(events.UNSELECTED_ALL, {},\n        /** shouldBubble */\n        true);\n      },\n      registerHeaderRowCheckbox: function () {\n        if (_this.headerRowCheckbox_) {\n          _this.headerRowCheckbox_.destroy();\n        }\n\n        var checkboxEl = _this.root_.querySelector(strings.HEADER_ROW_CHECKBOX_SELECTOR);\n\n        _this.headerRowCheckbox_ = _this.checkboxFactory_(checkboxEl);\n      },\n      registerRowCheckboxes: function () {\n        if (_this.rowCheckboxList_) {\n          _this.rowCheckboxList_.forEach(function (checkbox) {\n            return checkbox.destroy();\n          });\n        }\n\n        _this.rowCheckboxList_ = [];\n\n        _this.getRows().forEach(function (rowEl) {\n          var checkbox = _this.checkboxFactory_(rowEl.querySelector(strings.ROW_CHECKBOX_SELECTOR));\n\n          _this.rowCheckboxList_.push(checkbox);\n        });\n      },\n      removeClassAtRowIndex: function (rowIndex, className) {\n        _this.getRows()[rowIndex].classList.remove(className);\n      },\n      setAttributeAtRowIndex: function (rowIndex, attr, value) {\n        _this.getRows()[rowIndex].setAttribute(attr, value);\n      },\n      setHeaderRowCheckboxChecked: function (checked) {\n        _this.headerRowCheckbox_.checked = checked;\n      },\n      setHeaderRowCheckboxIndeterminate: function (indeterminate) {\n        _this.headerRowCheckbox_.indeterminate = indeterminate;\n      },\n      setRowCheckboxCheckedAtIndex: function (rowIndex, checked) {\n        _this.rowCheckboxList_[rowIndex].checked = checked;\n      }\n    };\n    return new MDCDataTableFoundation(adapter);\n  };\n\n  MDCDataTable.prototype.getRowByIndex_ = function (index) {\n    return this.getRows()[index];\n  };\n\n  MDCDataTable.prototype.getRowIdByIndex_ = function (index) {\n    return this.getRowByIndex_(index).getAttribute(strings.DATA_ROW_ID_ATTR);\n  };\n\n  return MDCDataTable;\n}(MDCComponent);\n\nexport { MDCDataTable };","map":{"version":3,"sources":["component.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { MDCCheckbox } from '@material/checkbox/component';\nimport { closest } from '@material/dom/ponyfill';\nimport { cssClasses, events, strings } from './constants';\nimport { MDCDataTableFoundation } from './foundation';\nvar MDCDataTable = /** @class */ (function (_super) {\n    tslib_1.__extends(MDCDataTable, _super);\n    function MDCDataTable() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MDCDataTable.attachTo = function (root) {\n        return new MDCDataTable(root);\n    };\n    MDCDataTable.prototype.initialize = function (checkboxFactory) {\n        if (checkboxFactory === void 0) { checkboxFactory = function (el) { return new MDCCheckbox(el); }; }\n        this.checkboxFactory_ = checkboxFactory;\n    };\n    MDCDataTable.prototype.initialSyncWithDOM = function () {\n        var _this = this;\n        this.headerRow_ = this.root_.querySelector(\".\" + cssClasses.HEADER_ROW);\n        this.handleHeaderRowCheckboxChange_ = function () { return _this.foundation_.handleHeaderRowCheckboxChange(); };\n        this.headerRow_.addEventListener('change', this.handleHeaderRowCheckboxChange_);\n        this.content_ = this.root_.querySelector(\".\" + cssClasses.CONTENT);\n        this.handleRowCheckboxChange_ = function (event) { return _this.foundation_.handleRowCheckboxChange(event); };\n        this.content_.addEventListener('change', this.handleRowCheckboxChange_);\n        this.layout();\n    };\n    /**\n     * Re-initializes header row checkbox and row checkboxes when selectable rows are added or removed from table.\n     */\n    MDCDataTable.prototype.layout = function () {\n        this.foundation_.layout();\n    };\n    /**\n     * @return Returns array of row elements.\n     */\n    MDCDataTable.prototype.getRows = function () {\n        return this.foundation_.getRows();\n    };\n    /**\n     * @return Returns array of selected row ids.\n     */\n    MDCDataTable.prototype.getSelectedRowIds = function () {\n        return this.foundation_.getSelectedRowIds();\n    };\n    /**\n     * Sets selected row ids. Overwrites previously selected rows.\n     * @param rowIds Array of row ids that needs to be selected.\n     */\n    MDCDataTable.prototype.setSelectedRowIds = function (rowIds) {\n        this.foundation_.setSelectedRowIds(rowIds);\n    };\n    MDCDataTable.prototype.destroy = function () {\n        this.headerRow_.removeEventListener('change', this.handleHeaderRowCheckboxChange_);\n        this.content_.removeEventListener('change', this.handleRowCheckboxChange_);\n        this.headerRowCheckbox_.destroy();\n        this.rowCheckboxList_.forEach(function (checkbox) { return checkbox.destroy(); });\n    };\n    MDCDataTable.prototype.getDefaultFoundation = function () {\n        var _this = this;\n        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n        var adapter = {\n            addClassAtRowIndex: function (rowIndex, className) { return _this.getRows()[rowIndex].classList.add(className); },\n            getRowCount: function () { return _this.getRows().length; },\n            getRowElements: function () { return [].slice.call(_this.root_.querySelectorAll(strings.ROW_SELECTOR)); },\n            getRowIdAtIndex: function (rowIndex) { return _this.getRows()[rowIndex].getAttribute(strings.DATA_ROW_ID_ATTR); },\n            getRowIndexByChildElement: function (el) {\n                return _this.getRows().indexOf(closest(el, strings.ROW_SELECTOR));\n            },\n            getSelectedRowCount: function () { return _this.root_.querySelectorAll(strings.ROW_SELECTED_SELECTOR).length; },\n            isCheckboxAtRowIndexChecked: function (rowIndex) { return _this.rowCheckboxList_[rowIndex].checked; },\n            isHeaderRowCheckboxChecked: function () { return _this.headerRowCheckbox_.checked; },\n            isRowsSelectable: function () { return !!_this.root_.querySelector(strings.ROW_CHECKBOX_SELECTOR); },\n            notifyRowSelectionChanged: function (data) {\n                _this.emit(events.ROW_SELECTION_CHANGED, {\n                    row: _this.getRowByIndex_(data.rowIndex),\n                    rowId: _this.getRowIdByIndex_(data.rowIndex),\n                    rowIndex: data.rowIndex,\n                    selected: data.selected,\n                }, \n                /** shouldBubble */ true);\n            },\n            notifySelectedAll: function () { return _this.emit(events.SELECTED_ALL, {}, /** shouldBubble */ true); },\n            notifyUnselectedAll: function () { return _this.emit(events.UNSELECTED_ALL, {}, /** shouldBubble */ true); },\n            registerHeaderRowCheckbox: function () {\n                if (_this.headerRowCheckbox_) {\n                    _this.headerRowCheckbox_.destroy();\n                }\n                var checkboxEl = _this.root_.querySelector(strings.HEADER_ROW_CHECKBOX_SELECTOR);\n                _this.headerRowCheckbox_ = _this.checkboxFactory_(checkboxEl);\n            },\n            registerRowCheckboxes: function () {\n                if (_this.rowCheckboxList_) {\n                    _this.rowCheckboxList_.forEach(function (checkbox) { return checkbox.destroy(); });\n                }\n                _this.rowCheckboxList_ = [];\n                _this.getRows().forEach(function (rowEl) {\n                    var checkbox = _this.checkboxFactory_(rowEl.querySelector(strings.ROW_CHECKBOX_SELECTOR));\n                    _this.rowCheckboxList_.push(checkbox);\n                });\n            },\n            removeClassAtRowIndex: function (rowIndex, className) {\n                _this.getRows()[rowIndex].classList.remove(className);\n            },\n            setAttributeAtRowIndex: function (rowIndex, attr, value) {\n                _this.getRows()[rowIndex].setAttribute(attr, value);\n            },\n            setHeaderRowCheckboxChecked: function (checked) {\n                _this.headerRowCheckbox_.checked = checked;\n            },\n            setHeaderRowCheckboxIndeterminate: function (indeterminate) {\n                _this.headerRowCheckbox_.indeterminate = indeterminate;\n            },\n            setRowCheckboxCheckedAtIndex: function (rowIndex, checked) {\n                _this.rowCheckboxList_[rowIndex].checked = checked;\n            },\n        };\n        return new MDCDataTableFoundation(adapter);\n    };\n    MDCDataTable.prototype.getRowByIndex_ = function (index) {\n        return this.getRows()[index];\n    };\n    MDCDataTable.prototype.getRowIdByIndex_ = function (index) {\n        return this.getRowByIndex_(index).getAttribute(strings.DATA_ROW_ID_ATTR);\n    };\n    return MDCDataTable;\n}(MDCComponent));\nexport { MDCDataTable };\n//# sourceMappingURL=component.js.map"]},"metadata":{},"sourceType":"module"}