{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, numbers, strings } from './constants';\n\nvar MDCCheckboxFoundation =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCCheckboxFoundation, _super);\n\n  function MDCCheckboxFoundation(adapter) {\n    var _this = _super.call(this, tslib_1.__assign({}, MDCCheckboxFoundation.defaultAdapter, adapter)) || this;\n\n    _this.currentCheckState_ = strings.TRANSITION_STATE_INIT;\n    _this.currentAnimationClass_ = '';\n    _this.animEndLatchTimer_ = 0;\n    _this.enableAnimationEndHandler_ = false;\n    return _this;\n  }\n\n  Object.defineProperty(MDCCheckboxFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCCheckboxFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCCheckboxFoundation, \"numbers\", {\n    get: function () {\n      return numbers;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCCheckboxFoundation, \"defaultAdapter\", {\n    get: function () {\n      return {\n        addClass: function () {\n          return undefined;\n        },\n        forceLayout: function () {\n          return undefined;\n        },\n        hasNativeControl: function () {\n          return false;\n        },\n        isAttachedToDOM: function () {\n          return false;\n        },\n        isChecked: function () {\n          return false;\n        },\n        isIndeterminate: function () {\n          return false;\n        },\n        removeClass: function () {\n          return undefined;\n        },\n        removeNativeControlAttr: function () {\n          return undefined;\n        },\n        setNativeControlAttr: function () {\n          return undefined;\n        },\n        setNativeControlDisabled: function () {\n          return undefined;\n        }\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCCheckboxFoundation.prototype.init = function () {\n    this.currentCheckState_ = this.determineCheckState_();\n    this.updateAriaChecked_();\n    this.adapter_.addClass(cssClasses.UPGRADED);\n  };\n\n  MDCCheckboxFoundation.prototype.destroy = function () {\n    clearTimeout(this.animEndLatchTimer_);\n  };\n\n  MDCCheckboxFoundation.prototype.setDisabled = function (disabled) {\n    this.adapter_.setNativeControlDisabled(disabled);\n\n    if (disabled) {\n      this.adapter_.addClass(cssClasses.DISABLED);\n    } else {\n      this.adapter_.removeClass(cssClasses.DISABLED);\n    }\n  };\n  /**\n   * Handles the animationend event for the checkbox\n   */\n\n\n  MDCCheckboxFoundation.prototype.handleAnimationEnd = function () {\n    var _this = this;\n\n    if (!this.enableAnimationEndHandler_) {\n      return;\n    }\n\n    clearTimeout(this.animEndLatchTimer_);\n    this.animEndLatchTimer_ = setTimeout(function () {\n      _this.adapter_.removeClass(_this.currentAnimationClass_);\n\n      _this.enableAnimationEndHandler_ = false;\n    }, numbers.ANIM_END_LATCH_MS);\n  };\n  /**\n   * Handles the change event for the checkbox\n   */\n\n\n  MDCCheckboxFoundation.prototype.handleChange = function () {\n    this.transitionCheckState_();\n  };\n\n  MDCCheckboxFoundation.prototype.transitionCheckState_ = function () {\n    if (!this.adapter_.hasNativeControl()) {\n      return;\n    }\n\n    var oldState = this.currentCheckState_;\n    var newState = this.determineCheckState_();\n\n    if (oldState === newState) {\n      return;\n    }\n\n    this.updateAriaChecked_();\n    var TRANSITION_STATE_UNCHECKED = strings.TRANSITION_STATE_UNCHECKED;\n    var SELECTED = cssClasses.SELECTED;\n\n    if (newState === TRANSITION_STATE_UNCHECKED) {\n      this.adapter_.removeClass(SELECTED);\n    } else {\n      this.adapter_.addClass(SELECTED);\n    } // Check to ensure that there isn't a previously existing animation class, in case for example\n    // the user interacted with the checkbox before the animation was finished.\n\n\n    if (this.currentAnimationClass_.length > 0) {\n      clearTimeout(this.animEndLatchTimer_);\n      this.adapter_.forceLayout();\n      this.adapter_.removeClass(this.currentAnimationClass_);\n    }\n\n    this.currentAnimationClass_ = this.getTransitionAnimationClass_(oldState, newState);\n    this.currentCheckState_ = newState; // Check for parentNode so that animations are only run when the element is attached\n    // to the DOM.\n\n    if (this.adapter_.isAttachedToDOM() && this.currentAnimationClass_.length > 0) {\n      this.adapter_.addClass(this.currentAnimationClass_);\n      this.enableAnimationEndHandler_ = true;\n    }\n  };\n\n  MDCCheckboxFoundation.prototype.determineCheckState_ = function () {\n    var TRANSITION_STATE_INDETERMINATE = strings.TRANSITION_STATE_INDETERMINATE,\n        TRANSITION_STATE_CHECKED = strings.TRANSITION_STATE_CHECKED,\n        TRANSITION_STATE_UNCHECKED = strings.TRANSITION_STATE_UNCHECKED;\n\n    if (this.adapter_.isIndeterminate()) {\n      return TRANSITION_STATE_INDETERMINATE;\n    }\n\n    return this.adapter_.isChecked() ? TRANSITION_STATE_CHECKED : TRANSITION_STATE_UNCHECKED;\n  };\n\n  MDCCheckboxFoundation.prototype.getTransitionAnimationClass_ = function (oldState, newState) {\n    var TRANSITION_STATE_INIT = strings.TRANSITION_STATE_INIT,\n        TRANSITION_STATE_CHECKED = strings.TRANSITION_STATE_CHECKED,\n        TRANSITION_STATE_UNCHECKED = strings.TRANSITION_STATE_UNCHECKED;\n    var _a = MDCCheckboxFoundation.cssClasses,\n        ANIM_UNCHECKED_CHECKED = _a.ANIM_UNCHECKED_CHECKED,\n        ANIM_UNCHECKED_INDETERMINATE = _a.ANIM_UNCHECKED_INDETERMINATE,\n        ANIM_CHECKED_UNCHECKED = _a.ANIM_CHECKED_UNCHECKED,\n        ANIM_CHECKED_INDETERMINATE = _a.ANIM_CHECKED_INDETERMINATE,\n        ANIM_INDETERMINATE_CHECKED = _a.ANIM_INDETERMINATE_CHECKED,\n        ANIM_INDETERMINATE_UNCHECKED = _a.ANIM_INDETERMINATE_UNCHECKED;\n\n    switch (oldState) {\n      case TRANSITION_STATE_INIT:\n        if (newState === TRANSITION_STATE_UNCHECKED) {\n          return '';\n        }\n\n        return newState === TRANSITION_STATE_CHECKED ? ANIM_INDETERMINATE_CHECKED : ANIM_INDETERMINATE_UNCHECKED;\n\n      case TRANSITION_STATE_UNCHECKED:\n        return newState === TRANSITION_STATE_CHECKED ? ANIM_UNCHECKED_CHECKED : ANIM_UNCHECKED_INDETERMINATE;\n\n      case TRANSITION_STATE_CHECKED:\n        return newState === TRANSITION_STATE_UNCHECKED ? ANIM_CHECKED_UNCHECKED : ANIM_CHECKED_INDETERMINATE;\n\n      default:\n        // TRANSITION_STATE_INDETERMINATE\n        return newState === TRANSITION_STATE_CHECKED ? ANIM_INDETERMINATE_CHECKED : ANIM_INDETERMINATE_UNCHECKED;\n    }\n  };\n\n  MDCCheckboxFoundation.prototype.updateAriaChecked_ = function () {\n    // Ensure aria-checked is set to mixed if checkbox is in indeterminate state.\n    if (this.adapter_.isIndeterminate()) {\n      this.adapter_.setNativeControlAttr(strings.ARIA_CHECKED_ATTR, strings.ARIA_CHECKED_INDETERMINATE_VALUE);\n    } else {\n      // The on/off state does not need to keep track of aria-checked, since\n      // the screenreader uses the checked property on the checkbox element.\n      this.adapter_.removeNativeControlAttr(strings.ARIA_CHECKED_ATTR);\n    }\n  };\n\n  return MDCCheckboxFoundation;\n}(MDCFoundation);\n\nexport { MDCCheckboxFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCCheckboxFoundation;","map":{"version":3,"sources":["foundation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, numbers, strings } from './constants';\nvar MDCCheckboxFoundation = /** @class */ (function (_super) {\n    tslib_1.__extends(MDCCheckboxFoundation, _super);\n    function MDCCheckboxFoundation(adapter) {\n        var _this = _super.call(this, tslib_1.__assign({}, MDCCheckboxFoundation.defaultAdapter, adapter)) || this;\n        _this.currentCheckState_ = strings.TRANSITION_STATE_INIT;\n        _this.currentAnimationClass_ = '';\n        _this.animEndLatchTimer_ = 0;\n        _this.enableAnimationEndHandler_ = false;\n        return _this;\n    }\n    Object.defineProperty(MDCCheckboxFoundation, \"cssClasses\", {\n        get: function () {\n            return cssClasses;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCCheckboxFoundation, \"strings\", {\n        get: function () {\n            return strings;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCCheckboxFoundation, \"numbers\", {\n        get: function () {\n            return numbers;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCCheckboxFoundation, \"defaultAdapter\", {\n        get: function () {\n            return {\n                addClass: function () { return undefined; },\n                forceLayout: function () { return undefined; },\n                hasNativeControl: function () { return false; },\n                isAttachedToDOM: function () { return false; },\n                isChecked: function () { return false; },\n                isIndeterminate: function () { return false; },\n                removeClass: function () { return undefined; },\n                removeNativeControlAttr: function () { return undefined; },\n                setNativeControlAttr: function () { return undefined; },\n                setNativeControlDisabled: function () { return undefined; },\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MDCCheckboxFoundation.prototype.init = function () {\n        this.currentCheckState_ = this.determineCheckState_();\n        this.updateAriaChecked_();\n        this.adapter_.addClass(cssClasses.UPGRADED);\n    };\n    MDCCheckboxFoundation.prototype.destroy = function () {\n        clearTimeout(this.animEndLatchTimer_);\n    };\n    MDCCheckboxFoundation.prototype.setDisabled = function (disabled) {\n        this.adapter_.setNativeControlDisabled(disabled);\n        if (disabled) {\n            this.adapter_.addClass(cssClasses.DISABLED);\n        }\n        else {\n            this.adapter_.removeClass(cssClasses.DISABLED);\n        }\n    };\n    /**\n     * Handles the animationend event for the checkbox\n     */\n    MDCCheckboxFoundation.prototype.handleAnimationEnd = function () {\n        var _this = this;\n        if (!this.enableAnimationEndHandler_) {\n            return;\n        }\n        clearTimeout(this.animEndLatchTimer_);\n        this.animEndLatchTimer_ = setTimeout(function () {\n            _this.adapter_.removeClass(_this.currentAnimationClass_);\n            _this.enableAnimationEndHandler_ = false;\n        }, numbers.ANIM_END_LATCH_MS);\n    };\n    /**\n     * Handles the change event for the checkbox\n     */\n    MDCCheckboxFoundation.prototype.handleChange = function () {\n        this.transitionCheckState_();\n    };\n    MDCCheckboxFoundation.prototype.transitionCheckState_ = function () {\n        if (!this.adapter_.hasNativeControl()) {\n            return;\n        }\n        var oldState = this.currentCheckState_;\n        var newState = this.determineCheckState_();\n        if (oldState === newState) {\n            return;\n        }\n        this.updateAriaChecked_();\n        var TRANSITION_STATE_UNCHECKED = strings.TRANSITION_STATE_UNCHECKED;\n        var SELECTED = cssClasses.SELECTED;\n        if (newState === TRANSITION_STATE_UNCHECKED) {\n            this.adapter_.removeClass(SELECTED);\n        }\n        else {\n            this.adapter_.addClass(SELECTED);\n        }\n        // Check to ensure that there isn't a previously existing animation class, in case for example\n        // the user interacted with the checkbox before the animation was finished.\n        if (this.currentAnimationClass_.length > 0) {\n            clearTimeout(this.animEndLatchTimer_);\n            this.adapter_.forceLayout();\n            this.adapter_.removeClass(this.currentAnimationClass_);\n        }\n        this.currentAnimationClass_ = this.getTransitionAnimationClass_(oldState, newState);\n        this.currentCheckState_ = newState;\n        // Check for parentNode so that animations are only run when the element is attached\n        // to the DOM.\n        if (this.adapter_.isAttachedToDOM() && this.currentAnimationClass_.length > 0) {\n            this.adapter_.addClass(this.currentAnimationClass_);\n            this.enableAnimationEndHandler_ = true;\n        }\n    };\n    MDCCheckboxFoundation.prototype.determineCheckState_ = function () {\n        var TRANSITION_STATE_INDETERMINATE = strings.TRANSITION_STATE_INDETERMINATE, TRANSITION_STATE_CHECKED = strings.TRANSITION_STATE_CHECKED, TRANSITION_STATE_UNCHECKED = strings.TRANSITION_STATE_UNCHECKED;\n        if (this.adapter_.isIndeterminate()) {\n            return TRANSITION_STATE_INDETERMINATE;\n        }\n        return this.adapter_.isChecked() ? TRANSITION_STATE_CHECKED : TRANSITION_STATE_UNCHECKED;\n    };\n    MDCCheckboxFoundation.prototype.getTransitionAnimationClass_ = function (oldState, newState) {\n        var TRANSITION_STATE_INIT = strings.TRANSITION_STATE_INIT, TRANSITION_STATE_CHECKED = strings.TRANSITION_STATE_CHECKED, TRANSITION_STATE_UNCHECKED = strings.TRANSITION_STATE_UNCHECKED;\n        var _a = MDCCheckboxFoundation.cssClasses, ANIM_UNCHECKED_CHECKED = _a.ANIM_UNCHECKED_CHECKED, ANIM_UNCHECKED_INDETERMINATE = _a.ANIM_UNCHECKED_INDETERMINATE, ANIM_CHECKED_UNCHECKED = _a.ANIM_CHECKED_UNCHECKED, ANIM_CHECKED_INDETERMINATE = _a.ANIM_CHECKED_INDETERMINATE, ANIM_INDETERMINATE_CHECKED = _a.ANIM_INDETERMINATE_CHECKED, ANIM_INDETERMINATE_UNCHECKED = _a.ANIM_INDETERMINATE_UNCHECKED;\n        switch (oldState) {\n            case TRANSITION_STATE_INIT:\n                if (newState === TRANSITION_STATE_UNCHECKED) {\n                    return '';\n                }\n                return newState === TRANSITION_STATE_CHECKED ? ANIM_INDETERMINATE_CHECKED : ANIM_INDETERMINATE_UNCHECKED;\n            case TRANSITION_STATE_UNCHECKED:\n                return newState === TRANSITION_STATE_CHECKED ? ANIM_UNCHECKED_CHECKED : ANIM_UNCHECKED_INDETERMINATE;\n            case TRANSITION_STATE_CHECKED:\n                return newState === TRANSITION_STATE_UNCHECKED ? ANIM_CHECKED_UNCHECKED : ANIM_CHECKED_INDETERMINATE;\n            default: // TRANSITION_STATE_INDETERMINATE\n                return newState === TRANSITION_STATE_CHECKED ? ANIM_INDETERMINATE_CHECKED : ANIM_INDETERMINATE_UNCHECKED;\n        }\n    };\n    MDCCheckboxFoundation.prototype.updateAriaChecked_ = function () {\n        // Ensure aria-checked is set to mixed if checkbox is in indeterminate state.\n        if (this.adapter_.isIndeterminate()) {\n            this.adapter_.setNativeControlAttr(strings.ARIA_CHECKED_ATTR, strings.ARIA_CHECKED_INDETERMINATE_VALUE);\n        }\n        else {\n            // The on/off state does not need to keep track of aria-checked, since\n            // the screenreader uses the checked property on the checkbox element.\n            this.adapter_.removeNativeControlAttr(strings.ARIA_CHECKED_ATTR);\n        }\n    };\n    return MDCCheckboxFoundation;\n}(MDCFoundation));\nexport { MDCCheckboxFoundation };\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default MDCCheckboxFoundation;\n//# sourceMappingURL=foundation.js.map"]},"metadata":{},"sourceType":"module"}