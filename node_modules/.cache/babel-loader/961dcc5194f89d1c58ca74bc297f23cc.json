{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { getCorrectEventName } from '@material/animation/util';\nimport { MDCComponent } from '@material/base/component';\nimport { applyPassive } from '@material/dom/events';\nimport { matches } from '@material/dom/ponyfill';\nimport { MDCRipple } from '@material/ripple/component';\nimport { MDCRippleFoundation } from '@material/ripple/foundation';\nimport { MDCCheckboxFoundation } from './foundation';\nvar CB_PROTO_PROPS = ['checked', 'indeterminate'];\n\nvar MDCCheckbox =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCCheckbox, _super);\n\n  function MDCCheckbox() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.ripple_ = _this.createRipple_();\n    return _this;\n  }\n\n  MDCCheckbox.attachTo = function (root) {\n    return new MDCCheckbox(root);\n  };\n\n  Object.defineProperty(MDCCheckbox.prototype, \"ripple\", {\n    get: function () {\n      return this.ripple_;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCCheckbox.prototype, \"checked\", {\n    get: function () {\n      return this.nativeControl_.checked;\n    },\n    set: function (checked) {\n      this.nativeControl_.checked = checked;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCCheckbox.prototype, \"indeterminate\", {\n    get: function () {\n      return this.nativeControl_.indeterminate;\n    },\n    set: function (indeterminate) {\n      this.nativeControl_.indeterminate = indeterminate;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCCheckbox.prototype, \"disabled\", {\n    get: function () {\n      return this.nativeControl_.disabled;\n    },\n    set: function (disabled) {\n      this.foundation_.setDisabled(disabled);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCCheckbox.prototype, \"value\", {\n    get: function () {\n      return this.nativeControl_.value;\n    },\n    set: function (value) {\n      this.nativeControl_.value = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCCheckbox.prototype.initialSyncWithDOM = function () {\n    var _this = this;\n\n    this.handleChange_ = function () {\n      return _this.foundation_.handleChange();\n    };\n\n    this.handleAnimationEnd_ = function () {\n      return _this.foundation_.handleAnimationEnd();\n    };\n\n    this.nativeControl_.addEventListener('change', this.handleChange_);\n    this.listen(getCorrectEventName(window, 'animationend'), this.handleAnimationEnd_);\n    this.installPropertyChangeHooks_();\n  };\n\n  MDCCheckbox.prototype.destroy = function () {\n    this.ripple_.destroy();\n    this.nativeControl_.removeEventListener('change', this.handleChange_);\n    this.unlisten(getCorrectEventName(window, 'animationend'), this.handleAnimationEnd_);\n    this.uninstallPropertyChangeHooks_();\n\n    _super.prototype.destroy.call(this);\n  };\n\n  MDCCheckbox.prototype.getDefaultFoundation = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n\n\n    var adapter = {\n      addClass: function (className) {\n        return _this.root_.classList.add(className);\n      },\n      forceLayout: function () {\n        return _this.root_.offsetWidth;\n      },\n      hasNativeControl: function () {\n        return !!_this.nativeControl_;\n      },\n      isAttachedToDOM: function () {\n        return Boolean(_this.root_.parentNode);\n      },\n      isChecked: function () {\n        return _this.checked;\n      },\n      isIndeterminate: function () {\n        return _this.indeterminate;\n      },\n      removeClass: function (className) {\n        return _this.root_.classList.remove(className);\n      },\n      removeNativeControlAttr: function (attr) {\n        return _this.nativeControl_.removeAttribute(attr);\n      },\n      setNativeControlAttr: function (attr, value) {\n        return _this.nativeControl_.setAttribute(attr, value);\n      },\n      setNativeControlDisabled: function (disabled) {\n        return _this.nativeControl_.disabled = disabled;\n      }\n    };\n    return new MDCCheckboxFoundation(adapter);\n  };\n\n  MDCCheckbox.prototype.createRipple_ = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n\n\n    var adapter = tslib_1.__assign({}, MDCRipple.createAdapter(this), {\n      deregisterInteractionHandler: function (evtType, handler) {\n        return _this.nativeControl_.removeEventListener(evtType, handler, applyPassive());\n      },\n      isSurfaceActive: function () {\n        return matches(_this.nativeControl_, ':active');\n      },\n      isUnbounded: function () {\n        return true;\n      },\n      registerInteractionHandler: function (evtType, handler) {\n        return _this.nativeControl_.addEventListener(evtType, handler, applyPassive());\n      }\n    });\n\n    return new MDCRipple(this.root_, new MDCRippleFoundation(adapter));\n  };\n\n  MDCCheckbox.prototype.installPropertyChangeHooks_ = function () {\n    var _this = this;\n\n    var nativeCb = this.nativeControl_;\n    var cbProto = Object.getPrototypeOf(nativeCb);\n    CB_PROTO_PROPS.forEach(function (controlState) {\n      var desc = Object.getOwnPropertyDescriptor(cbProto, controlState); // We have to check for this descriptor, since some browsers (Safari) don't support its return.\n      // See: https://bugs.webkit.org/show_bug.cgi?id=49739\n\n      if (!validDescriptor(desc)) {\n        return;\n      } // Type cast is needed for compatibility with Closure Compiler.\n\n\n      var nativeGetter = desc.get;\n      var nativeCbDesc = {\n        configurable: desc.configurable,\n        enumerable: desc.enumerable,\n        get: nativeGetter,\n        set: function (state) {\n          desc.set.call(nativeCb, state);\n\n          _this.foundation_.handleChange();\n        }\n      };\n      Object.defineProperty(nativeCb, controlState, nativeCbDesc);\n    });\n  };\n\n  MDCCheckbox.prototype.uninstallPropertyChangeHooks_ = function () {\n    var nativeCb = this.nativeControl_;\n    var cbProto = Object.getPrototypeOf(nativeCb);\n    CB_PROTO_PROPS.forEach(function (controlState) {\n      var desc = Object.getOwnPropertyDescriptor(cbProto, controlState);\n\n      if (!validDescriptor(desc)) {\n        return;\n      }\n\n      Object.defineProperty(nativeCb, controlState, desc);\n    });\n  };\n\n  Object.defineProperty(MDCCheckbox.prototype, \"nativeControl_\", {\n    get: function () {\n      var NATIVE_CONTROL_SELECTOR = MDCCheckboxFoundation.strings.NATIVE_CONTROL_SELECTOR;\n      var el = this.root_.querySelector(NATIVE_CONTROL_SELECTOR);\n\n      if (!el) {\n        throw new Error(\"Checkbox component requires a \" + NATIVE_CONTROL_SELECTOR + \" element\");\n      }\n\n      return el;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return MDCCheckbox;\n}(MDCComponent);\n\nexport { MDCCheckbox };\n\nfunction validDescriptor(inputPropDesc) {\n  return !!inputPropDesc && typeof inputPropDesc.set === 'function';\n}","map":{"version":3,"sources":["component.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { getCorrectEventName } from '@material/animation/util';\nimport { MDCComponent } from '@material/base/component';\nimport { applyPassive } from '@material/dom/events';\nimport { matches } from '@material/dom/ponyfill';\nimport { MDCRipple } from '@material/ripple/component';\nimport { MDCRippleFoundation } from '@material/ripple/foundation';\nimport { MDCCheckboxFoundation } from './foundation';\nvar CB_PROTO_PROPS = ['checked', 'indeterminate'];\nvar MDCCheckbox = /** @class */ (function (_super) {\n    tslib_1.__extends(MDCCheckbox, _super);\n    function MDCCheckbox() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.ripple_ = _this.createRipple_();\n        return _this;\n    }\n    MDCCheckbox.attachTo = function (root) {\n        return new MDCCheckbox(root);\n    };\n    Object.defineProperty(MDCCheckbox.prototype, \"ripple\", {\n        get: function () {\n            return this.ripple_;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCCheckbox.prototype, \"checked\", {\n        get: function () {\n            return this.nativeControl_.checked;\n        },\n        set: function (checked) {\n            this.nativeControl_.checked = checked;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCCheckbox.prototype, \"indeterminate\", {\n        get: function () {\n            return this.nativeControl_.indeterminate;\n        },\n        set: function (indeterminate) {\n            this.nativeControl_.indeterminate = indeterminate;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCCheckbox.prototype, \"disabled\", {\n        get: function () {\n            return this.nativeControl_.disabled;\n        },\n        set: function (disabled) {\n            this.foundation_.setDisabled(disabled);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCCheckbox.prototype, \"value\", {\n        get: function () {\n            return this.nativeControl_.value;\n        },\n        set: function (value) {\n            this.nativeControl_.value = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MDCCheckbox.prototype.initialSyncWithDOM = function () {\n        var _this = this;\n        this.handleChange_ = function () { return _this.foundation_.handleChange(); };\n        this.handleAnimationEnd_ = function () { return _this.foundation_.handleAnimationEnd(); };\n        this.nativeControl_.addEventListener('change', this.handleChange_);\n        this.listen(getCorrectEventName(window, 'animationend'), this.handleAnimationEnd_);\n        this.installPropertyChangeHooks_();\n    };\n    MDCCheckbox.prototype.destroy = function () {\n        this.ripple_.destroy();\n        this.nativeControl_.removeEventListener('change', this.handleChange_);\n        this.unlisten(getCorrectEventName(window, 'animationend'), this.handleAnimationEnd_);\n        this.uninstallPropertyChangeHooks_();\n        _super.prototype.destroy.call(this);\n    };\n    MDCCheckbox.prototype.getDefaultFoundation = function () {\n        var _this = this;\n        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n        var adapter = {\n            addClass: function (className) { return _this.root_.classList.add(className); },\n            forceLayout: function () { return _this.root_.offsetWidth; },\n            hasNativeControl: function () { return !!_this.nativeControl_; },\n            isAttachedToDOM: function () { return Boolean(_this.root_.parentNode); },\n            isChecked: function () { return _this.checked; },\n            isIndeterminate: function () { return _this.indeterminate; },\n            removeClass: function (className) { return _this.root_.classList.remove(className); },\n            removeNativeControlAttr: function (attr) { return _this.nativeControl_.removeAttribute(attr); },\n            setNativeControlAttr: function (attr, value) { return _this.nativeControl_.setAttribute(attr, value); },\n            setNativeControlDisabled: function (disabled) { return _this.nativeControl_.disabled = disabled; },\n        };\n        return new MDCCheckboxFoundation(adapter);\n    };\n    MDCCheckbox.prototype.createRipple_ = function () {\n        var _this = this;\n        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n        var adapter = tslib_1.__assign({}, MDCRipple.createAdapter(this), { deregisterInteractionHandler: function (evtType, handler) { return _this.nativeControl_.removeEventListener(evtType, handler, applyPassive()); }, isSurfaceActive: function () { return matches(_this.nativeControl_, ':active'); }, isUnbounded: function () { return true; }, registerInteractionHandler: function (evtType, handler) { return _this.nativeControl_.addEventListener(evtType, handler, applyPassive()); } });\n        return new MDCRipple(this.root_, new MDCRippleFoundation(adapter));\n    };\n    MDCCheckbox.prototype.installPropertyChangeHooks_ = function () {\n        var _this = this;\n        var nativeCb = this.nativeControl_;\n        var cbProto = Object.getPrototypeOf(nativeCb);\n        CB_PROTO_PROPS.forEach(function (controlState) {\n            var desc = Object.getOwnPropertyDescriptor(cbProto, controlState);\n            // We have to check for this descriptor, since some browsers (Safari) don't support its return.\n            // See: https://bugs.webkit.org/show_bug.cgi?id=49739\n            if (!validDescriptor(desc)) {\n                return;\n            }\n            // Type cast is needed for compatibility with Closure Compiler.\n            var nativeGetter = desc.get;\n            var nativeCbDesc = {\n                configurable: desc.configurable,\n                enumerable: desc.enumerable,\n                get: nativeGetter,\n                set: function (state) {\n                    desc.set.call(nativeCb, state);\n                    _this.foundation_.handleChange();\n                },\n            };\n            Object.defineProperty(nativeCb, controlState, nativeCbDesc);\n        });\n    };\n    MDCCheckbox.prototype.uninstallPropertyChangeHooks_ = function () {\n        var nativeCb = this.nativeControl_;\n        var cbProto = Object.getPrototypeOf(nativeCb);\n        CB_PROTO_PROPS.forEach(function (controlState) {\n            var desc = Object.getOwnPropertyDescriptor(cbProto, controlState);\n            if (!validDescriptor(desc)) {\n                return;\n            }\n            Object.defineProperty(nativeCb, controlState, desc);\n        });\n    };\n    Object.defineProperty(MDCCheckbox.prototype, \"nativeControl_\", {\n        get: function () {\n            var NATIVE_CONTROL_SELECTOR = MDCCheckboxFoundation.strings.NATIVE_CONTROL_SELECTOR;\n            var el = this.root_.querySelector(NATIVE_CONTROL_SELECTOR);\n            if (!el) {\n                throw new Error(\"Checkbox component requires a \" + NATIVE_CONTROL_SELECTOR + \" element\");\n            }\n            return el;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return MDCCheckbox;\n}(MDCComponent));\nexport { MDCCheckbox };\nfunction validDescriptor(inputPropDesc) {\n    return !!inputPropDesc && typeof inputPropDesc.set === 'function';\n}\n//# sourceMappingURL=component.js.map"]},"metadata":{},"sourceType":"module"}